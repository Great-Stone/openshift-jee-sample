try {

   timeout(time: 20, unit: 'MINUTES') {
      def GIT_SOURCE_URL = 'https://github.com/Great-Stone/openshift-jee-sample'
      def GIT_SOURCE_REF = 'master'
      def appName="jws-app-1"
      def project=""

      node {
        stage("Initialize") {
          project = env.PROJECT_NAME
        }
      }

      node("maven") {
        stage("Checkout") {
          git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
        }
        stage("Build WAR") {
          sh "mvn clean package -Popenshift -DskipTests=true"
          //stash name:"war", includes:"target/ROOT.war"
        }
        stage("Build Image") {
          //unstash name:"war"
          sh "oc start-build ${appName} --from-file=target/ROOT.war -n ${project} --follow"
          openshiftTag alias: 'false', destStream: '${appName}', destTag: 'latest', destinationNamespace: '${project}', namespace: '${project}', srcStream: '${appName}', srcTag: 'latest', verbose: 'false'
        }
        stage("Deploy") {
          input "Deploy?"
          openshift.withCluster() {
            openshift.withProject(${project}) {
               openshift.selector("dc", "tasks").rollout().latest();
               
               // Wait for application to be deployed
                def dc = openshift.selector("dc", "tasks").object()
                //def dc_version = dc.status.latestVersion
                //def rc = openshift.selector("rc", "tasks-${dc_version}").object()
               
              //def dc = openshift.selector('dc', "${appName}")
              dc.rollout().status()
            }
          }
        }
      }
   }
} catch (err) {
   echo "in catch block"
   echo "Caught: ${err}"
   currentBuild.result = 'FAILURE'
   throw err
}
